<?php
use Drupal\node\Entity\NodeType;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_install().
 */
function conference_room_reservation_install() {
  \Drupal::service('module_installer')->install(['node', 'datetime']);

  // Create a content type for conference rooms.
  if (!NodeType::load('conference_room')) {
    $type = NodeType::create([
      'type' => 'conference_room',
      'name' => 'Conference Room',
      'description' => 'A content type for conference rooms',
    ]);
    $type->save();
  }

  // Create a field for room capacity.
  if (!FieldStorageConfig::loadByName('node', 'field_capacity')) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_capacity',
      'entity_type' => 'node',
      'type' => 'integer',
    ]);
    $field_storage->save();
  }
  if (!FieldConfig::loadByName('node', 'conference_room', 'field_capacity')) {
    $field_instance = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'conference_room',
      'label' => 'Capacity',
      'required' => TRUE,
    ]);
    $field_instance->save();
  }

  // Create a field for room availability (date).
  if (!FieldStorageConfig::loadByName('node', 'field_availability')) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_availability',
      'entity_type' => 'node',
      'type' => 'datetime',
    ]);
    $field_storage->save();
  }
  if (!FieldConfig::loadByName('node', 'conference_room', 'field_availability')) {
    $field_instance = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'conference_room',
      'label' => 'Availability',
      'required' => TRUE,
    ]);
    $field_instance->save();
  }

  // Create a content type for bookings.
  if (!NodeType::load('booking')) {
    $type = NodeType::create([
      'type' => 'booking',
      'name' => 'Booking',
      'description' => 'A content type for room bookings',
    ]);
    $type->save();
  }

  // Create a field to reference conference rooms in bookings.
  if (!FieldStorageConfig::loadByName('node', 'field_room_reference')) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_room_reference',
      'entity_type' => 'node',
      'type' => 'entity_reference',
      'settings' => [
        'target_type' => 'node',
      ],
    ]);
    $field_storage->save();
  }
  if (!FieldConfig::loadByName('node', 'booking', 'field_room_reference')) {
    $field_instance = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'booking',
      'label' => 'Room Reference',
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [
          'target_bundles' => ['conference_room'],
        ],
      ],
      'required' => TRUE,
    ]);
    $field_instance->save();
  }

  // Create fields for booking start and end times.
  if (!FieldStorageConfig::loadByName('node', 'field_start_datetime')) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_start_datetime',
      'entity_type' => 'node',
      'type' => 'datetime',
    ]);
    $field_storage->save();
  }
  if (!FieldConfig::loadByName('node', 'booking', 'field_start_datetime')) {
    $field_instance = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'booking',
      'label' => 'Start DateTime',
      'required' => TRUE,
    ]);
    $field_instance->save();
  }

  if (!FieldStorageConfig::loadByName('node', 'field_end_datetime')) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_end_datetime',
      'entity_type' => 'node',
      'type' => 'datetime',
    ]);
    $field_storage->save();
  }
  if (!FieldConfig::loadByName('node', 'booking', 'field_end_datetime')) {
    $field_instance = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'booking',
      'label' => 'End DateTime',
      'required' => TRUE,
    ]);
    $field_instance->save();
  }
}

/**
 * Implements hook_uninstall().
 */
function conference_room_reservation_uninstall() {
  // Remove the conference_room and booking content types and their fields.
  if ($type = NodeType::load('conference_room')) {
    $type->delete();
  }
  if ($type = NodeType::load('booking')) {
    $type->delete();
  }

  // Optionally, delete field storages if they are not shared with other content types.
  $fields = ['field_capacity', 'field_availability', 'field_room_reference', 'field_start_datetime', 'field_end_datetime'];
  foreach ($fields as $field_name) {
    if ($field_storage = FieldStorageConfig::loadByName('node', $field_name)) {
      $field_storage->delete();
    }
  }
}
